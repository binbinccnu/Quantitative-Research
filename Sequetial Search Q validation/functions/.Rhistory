AlphaPermute <- function(dim) {
alpha = rep(0,dim)
for (j in 1:dim){
permute <- t(as.matrix(combn(dim,j)))
alpha0  <- matrix(0,nrow=nrow(permute),ncol=5)
for (l in 1:nrow(alpha0)){
alpha0[l,permute[l,]]=1
}
alpha <- rbind(alpha,alpha0)
}
return(alpha)
}
pmt=proc.time()
AlphaPermute(5)
proc.time()-pmt
AlphaPermute <- function(dim) {
alpha <- matrix(c(0, 1), 2, 1)
for (i in 1:(dim - 1)) {
alpha <- rbind(alpha, alpha)
alpha <- cbind(alpha, c(rep(0, 2 ^ i), rep(1, 2 ^ i)))
}
return(alpha)
}
pmt=proc.time()
AlphaPermute(5)
proc.time()-pmt
source('~/Dropbox/CD/Sequetial Search/functions/Sequential.R')
###############################################################################
# Main_function_Validation:                                                   #
#                                                                             #
# This is the main function which refins Q matrix using Jimmy's sequential    #
# search                                                                      #
#                                                                             #
###############################################################################
rm(list=ls(all=TRUE))
path  <- '/Users/Aurora/Dropbox/CD/Sequetial Search'
#path <- 'D:/dropbox/CD/Sequetial Search'
Q        <- read.table(file=paste(path,'/Q_matrix_5.txt',sep='')) # original Q matrix
response <- read.table(file=paste(path,'/examinee_data.dat',sep=''))
eps <- .002
source(paste(path,'//sourceDir.R',sep=''))
sourceDir(paste(path,'/functions',sep=''))
post_prior <- matrix(1,nrow(response),2^ncol(Q))
post=post_prior
Qrefine <- Sequential(eps,post,Q,response)
dim(post)
source('~/Dropbox/CD/Sequetial Search/functions/Sequential.R')
Qrefine <- Sequential(eps,post,Q,response)
